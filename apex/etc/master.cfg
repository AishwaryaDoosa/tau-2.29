# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['slaves'] = [buildslave.BuildSlave('apex-slave', 'apexbuildbot', keepalive_interval=3600)]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

apexrepo='git://github.com/khuck/xpress-apex.git'
hpx5repo='git@gitlab.crest.iu.edu:extreme/hpx.git'
hpx3repo='git@github.com:STEllAR-GROUP/hpx.git'
apexpoller = changes.GitPoller(
	apexrepo,
        workdir='apex-gitpoller-workdir', 
	branch='develop',
        pollinterval=300)
hpx5poller = changes.GitPoller(
	hpx5repo,
        workdir='hpx5-gitpoller-workdir', 
	branch='develop',
        pollinterval=300)
hpx5poller = changes.GitPoller(
	hpx5repo,
        workdir='hpx5-gitpoller-workdir', 
	branch='develop',
        pollinterval=300)

c['change_source'] = [apexpoller]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a '1-default-Release' build

Release_01=["01-default-Release"]
Release_02=["02-base-Release"]
Release_03=["03-malloc-Release"]
Release_04=["04-bfd-Release"]
Release_05=["05-ah-Release"]
Release_06=["06-ompt-Release"]
Release_07=["07-papi-Release"]
Release_08=["08-mpi-Release"]
Release_09=["09-otf-Release"]
Release_10=["10-install-Release"]
Release_bn=Release_01+Release_02+Release_03+Release_04+Release_05+Release_06+Release_07+Release_08+Release_10
Debug_01=["01-default-Debug"]
Debug_02=["02-base-Debug"]
Debug_03=["03-malloc-Debug"]
Debug_04=["04-bfd-Debug"]
Debug_05=["05-ah-Debug"]
Debug_06=["06-ompt-Debug"]
Debug_07=["07-papi-Debug"]
Debug_08=["08-mpi-Debug"]
Debug_09=["09-otf-Debug"]
Debug_10=["10-install-Debug"]
Debug_bn=Debug_01+Debug_02+Debug_03+Debug_04+Debug_05+Debug_06+Debug_07+Debug_08+Debug_10
OTF_bn=Release_09+Debug_09

# The only build that watches git
release01 = schedulers.SingleBranchScheduler(
                            name="release",
                            change_filter=util.ChangeFilter(branch='develop'),
                            treeStableTimer=300,
                            builderNames=Release_01)

# everything else is a dependency chain.
release02 = schedulers.Dependent(name="release02", upstream=release01, builderNames=Release_02)
release03 = schedulers.Dependent(name="release03", upstream=release02, builderNames=Release_03)
release04 = schedulers.Dependent(name="release04", upstream=release03, builderNames=Release_04)
release05 = schedulers.Dependent(name="release05", upstream=release04, builderNames=Release_05)
release06 = schedulers.Dependent(name="release06", upstream=release05, builderNames=Release_06)
release07 = schedulers.Dependent(name="release07", upstream=release06, builderNames=Release_07)
release08 = schedulers.Dependent(name="release08", upstream=release07, builderNames=Release_08)
release10 = schedulers.Dependent(name="release10", upstream=release08, builderNames=Release_10)
release09 = schedulers.Dependent(name="release09", upstream=release10, builderNames=Release_09)
debug01 = schedulers.Dependent(name="debug01", upstream=release09, builderNames=Debug_01)
debug02 = schedulers.Dependent(name="debug02", upstream=debug01, builderNames=Debug_02)
debug03 = schedulers.Dependent(name="debug03", upstream=debug02, builderNames=Debug_03)
debug04 = schedulers.Dependent(name="debug04", upstream=debug03, builderNames=Debug_04)
debug05 = schedulers.Dependent(name="debug05", upstream=debug04, builderNames=Debug_05)
debug06 = schedulers.Dependent(name="debug06", upstream=debug05, builderNames=Debug_06)
debug07 = schedulers.Dependent(name="debug07", upstream=debug06, builderNames=Debug_07)
debug08 = schedulers.Dependent(name="debug08", upstream=debug07, builderNames=Debug_08)
debug10 = schedulers.Dependent(name="debug10", upstream=debug08, builderNames=Debug_10)
debug09 = schedulers.Dependent(name="debug09", upstream=debug09, builderNames=Debug_09)
force_release = schedulers.ForceScheduler(name="force_release", builderNames=Release_bn)
force_debug = schedulers.ForceScheduler(name="force_debug", builderNames=Debug_bn)
force_otf = schedulers.ForceScheduler(name="force_otf", builderNames=OTF_bn)

c['schedulers'] = [release01,release02,release03,release04,release05,release06,release07,release08,release10,debug01,debug02,debug03,debug04,debug05,debug06,debug07,debug08,release09,debug09,force_release,force_debug,force_otf]

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

f1 = util.BuildFactory()
f1.addStep(steps.Git(repourl=apexrepo, mode='full', method='clean', submodules=True))
f1.addStep(steps.Configure(command=["etc/buildbot.sh", "-b", "default", "-t", "Release", "-s", "config", "-d", Release_01[0]]))
f1.addStep(steps.Compile(command=["etc/buildbot.sh", "-b", "default", "-t", "Release", "-s", "pcompile", "-d", Release_01[0]]))
f1.addStep(steps.Test(command=["etc/buildbot.sh", "-b", "default", "-t", "Release", "-s", "test", "-d", Release_01[0]], timeout=600))

f2 = util.BuildFactory()
f2.addStep(steps.Git(repourl=apexrepo, mode='full', method='clean', submodules=True))
f2.addStep(steps.Configure(command=["etc/buildbot.sh", "-b", "base", "-t", "Release", "-s", "config", "-d", Release_02[0]]))
f2.addStep(steps.Compile(command=["etc/buildbot.sh", "-b", "base", "-t", "Release", "-s", "pcompile", "-d", Release_02[0]]))
f2.addStep(steps.Test(command=["etc/buildbot.sh", "-b", "base", "-t", "Release", "-s", "test", "-d", Release_02[0]], timeout=600))

f3 = util.BuildFactory()
f3.addStep(steps.Git(repourl=apexrepo, mode='full', method='clean', submodules=True))
f3.addStep(steps.Configure(command=["etc/buildbot.sh", "-b", "malloc", "-t", "Release", "-s", "config", "-d", Release_03[0]]))
f3.addStep(steps.Compile(command=["etc/buildbot.sh", "-b", "malloc", "-t", "Release", "-s", "pcompile", "-d", Release_03[0]]))
f3.addStep(steps.Test(command=["etc/buildbot.sh", "-b", "malloc", "-t", "Release", "-s", "test", "-d", Release_03[0]], timeout=600))

f4 = util.BuildFactory()
f4.addStep(steps.Git(repourl=apexrepo, mode='full', method='clean', submodules=True))
f4.addStep(steps.Configure(command=["etc/buildbot.sh", "-b", "bfd", "-t", "Release", "-s", "config", "-d", Release_04[0]]))
f4.addStep(steps.Compile(command=["etc/buildbot.sh", "-b", "bfd", "-t", "Release", "-s", "pcompile", "-d", Release_04[0]]))
f4.addStep(steps.Test(command=["etc/buildbot.sh", "-b", "bfd", "-t", "Release", "-s", "test", "-d", Release_04[0]], timeout=600))

f5 = util.BuildFactory()
f5.addStep(steps.Git(repourl=apexrepo, mode='full', method='clean', submodules=True))
f5.addStep(steps.Configure(command=["etc/buildbot.sh", "-b", "ah", "-t", "Release", "-s", "config", "-d", Release_05[0]]))
f5.addStep(steps.Compile(command=["etc/buildbot.sh", "-b", "ah", "-t", "Release", "-s", "pcompile", "-d", Release_05[0]]))
f5.addStep(steps.Test(command=["etc/buildbot.sh", "-b", "ah", "-t", "Release", "-s", "test", "-d", Release_05[0]], timeout=600))

f6 = util.BuildFactory()
f6.addStep(steps.Git(repourl=apexrepo, mode='full', method='clean', submodules=True))
f6.addStep(steps.Configure(command=["etc/buildbot.sh", "-b", "ompt", "-t", "Release", "-s", "config", "-d", Release_06[0]]))
f6.addStep(steps.Compile(command=["etc/buildbot.sh", "-b", "ompt", "-t", "Release", "-s", "pcompile", "-d", Release_06[0]]))
f6.addStep(steps.Test(command=["etc/buildbot.sh", "-b", "ompt", "-t", "Release", "-s", "test", "-d", Release_06[0]], timeout=600))

f7 = util.BuildFactory()
f7.addStep(steps.Git(repourl=apexrepo, mode='full', method='clean', submodules=True))
f7.addStep(steps.Configure(command=["etc/buildbot.sh", "-b", "papi", "-t", "Release", "-s", "config", "-d", Release_07[0]]))
f7.addStep(steps.Compile(command=["etc/buildbot.sh", "-b", "papi", "-t", "Release", "-s", "pcompile", "-d", Release_07[0]]))
f7.addStep(steps.Test(command=["etc/buildbot.sh", "-b", "papi", "-t", "Release", "-s", "test", "-d", Release_07[0]], timeout=600))

f8 = util.BuildFactory()
f8.addStep(steps.Git(repourl=apexrepo, mode='full', method='clean', submodules=True))
f8.addStep(steps.Configure(command=["etc/buildbot.sh", "-b", "mpi", "-t", "Release", "-s", "config", "-d", Release_08[0]]))
f8.addStep(steps.Compile(command=["etc/buildbot.sh", "-b", "mpi", "-t", "Release", "-s", "pcompile", "-d", Release_08[0]]))
f8.addStep(steps.Test(command=["etc/buildbot.sh", "-b", "mpi", "-t", "Release", "-s", "test", "-d", Release_08[0]], timeout=600))

f9 = util.BuildFactory()
f9.addStep(steps.Git(repourl=apexrepo, mode='full', method='clean', submodules=True))
f9.addStep(steps.Configure(command=["etc/buildbot.sh", "-b", "otf", "-t", "Release", "-s", "config", "-d", Release_09[0]]))
f9.addStep(steps.Compile(command=["etc/buildbot.sh", "-b", "otf", "-t", "Release", "-s", "pcompile", "-d", Release_09[0]]))
f9.addStep(steps.Test(command=["etc/buildbot.sh", "-b", "otf", "-t", "Release", "-s", "test", "-d", Release_09[0]], timeout=1200))

f10 = util.BuildFactory()
f10.addStep(steps.Git(repourl=apexrepo, mode='full', method='clean', submodules=True))
f10.addStep(steps.Configure(command=["etc/buildbot.sh", "-b", "install", "-t", "Release", "-s", "config", "-d", Release_10[0]]))
f10.addStep(steps.Compile(command=["etc/buildbot.sh", "-b", "install", "-t", "Release", "-s", "pcompile", "-d", Release_10[0]]))
f10.addStep(steps.Compile(command=["etc/buildbot.sh", "-b", "install", "-t", "Release", "-s", "install", "-d", Release_10[0]]))

f1d = util.BuildFactory()
f1d.addStep(steps.Git(repourl=apexrepo, mode='full', method='clean', submodules=True))
f1d.addStep(steps.Configure(command=["etc/buildbot.sh", "-b", "default", "-t", "Debug", "-s", "config", "-d", Debug_01[0]]))
f1d.addStep(steps.Compile(command=["etc/buildbot.sh", "-b", "default", "-t", "Debug", "-s", "pcompile", "-d", Debug_01[0]]))
f1d.addStep(steps.Test(command=["etc/buildbot.sh", "-b", "default", "-t", "Debug", "-s", "test", "-d", Debug_01[0]], timeout=600))

f2d = util.BuildFactory()
f2d.addStep(steps.Git(repourl=apexrepo, mode='full', method='clean', submodules=True))
f2d.addStep(steps.Configure(command=["etc/buildbot.sh", "-b", "base", "-t", "Debug", "-s", "config", "-d", Debug_02[0]]))
f2d.addStep(steps.Compile(command=["etc/buildbot.sh", "-b", "base", "-t", "Debug", "-s", "pcompile", "-d", Debug_02[0]]))
f2d.addStep(steps.Test(command=["etc/buildbot.sh", "-b", "base", "-t", "Debug", "-s", "test", "-d", Debug_02[0]], timeout=600))

f3d = util.BuildFactory()
f3d.addStep(steps.Git(repourl=apexrepo, mode='full', method='clean', submodules=True))
f3d.addStep(steps.Configure(command=["etc/buildbot.sh", "-b", "malloc", "-t", "Debug", "-s", "config", "-d", Debug_03[0]]))
f3d.addStep(steps.Compile(command=["etc/buildbot.sh", "-b", "malloc", "-t", "Debug", "-s", "pcompile", "-d", Debug_03[0]]))
f3d.addStep(steps.Test(command=["etc/buildbot.sh", "-b", "malloc", "-t", "Debug", "-s", "test", "-d", Debug_03[0]], timeout=600))

f4d = util.BuildFactory()
f4d.addStep(steps.Git(repourl=apexrepo, mode='full', method='clean', submodules=True))
f4d.addStep(steps.Configure(command=["etc/buildbot.sh", "-b", "bfd", "-t", "Debug", "-s", "config", "-d", Debug_04[0]]))
f4d.addStep(steps.Compile(command=["etc/buildbot.sh", "-b", "bfd", "-t", "Debug", "-s", "pcompile", "-d", Debug_04[0]]))
f4d.addStep(steps.Test(command=["etc/buildbot.sh", "-b", "bfd", "-t", "Debug", "-s", "test", "-d", Debug_04[0]], timeout=600))

f5d = util.BuildFactory()
f5d.addStep(steps.Git(repourl=apexrepo, mode='full', method='clean', submodules=True))
f5d.addStep(steps.Configure(command=["etc/buildbot.sh", "-b", "ah", "-t", "Debug", "-s", "config", "-d", Debug_05[0]]))
f5d.addStep(steps.Compile(command=["etc/buildbot.sh", "-b", "ah", "-t", "Debug", "-s", "pcompile", "-d", Debug_05[0]]))
f5d.addStep(steps.Test(command=["etc/buildbot.sh", "-b", "ah", "-t", "Debug", "-s", "test", "-d", Debug_05[0]], timeout=600))

f6d = util.BuildFactory()
f6d.addStep(steps.Git(repourl=apexrepo, mode='full', method='clean', submodules=True))
f6d.addStep(steps.Configure(command=["etc/buildbot.sh", "-b", "ompt", "-t", "Debug", "-s", "config", "-d", Debug_06[0]]))
f6d.addStep(steps.Compile(command=["etc/buildbot.sh", "-b", "ompt", "-t", "Debug", "-s", "pcompile", "-d", Debug_06[0]]))
f6d.addStep(steps.Test(command=["etc/buildbot.sh", "-b", "ompt", "-t", "Debug", "-s", "test", "-d", Debug_06[0]], timeout=600))

f7d = util.BuildFactory()
f7d.addStep(steps.Git(repourl=apexrepo, mode='full', method='clean', submodules=True))
f7d.addStep(steps.Configure(command=["etc/buildbot.sh", "-b", "papi", "-t", "Debug", "-s", "config", "-d", Debug_07[0]]))
f7d.addStep(steps.Compile(command=["etc/buildbot.sh", "-b", "papi", "-t", "Debug", "-s", "pcompile", "-d", Debug_07[0]]))
f7d.addStep(steps.Test(command=["etc/buildbot.sh", "-b", "papi", "-t", "Debug", "-s", "test", "-d", Debug_07[0]], timeout=600))

f8d = util.BuildFactory()
f8d.addStep(steps.Git(repourl=apexrepo, mode='full', method='clean', submodules=True))
f8d.addStep(steps.Configure(command=["etc/buildbot.sh", "-b", "mpi", "-t", "Debug", "-s", "config", "-d", Debug_08[0]]))
f8d.addStep(steps.Compile(command=["etc/buildbot.sh", "-b", "mpi", "-t", "Debug", "-s", "pcompile", "-d", Debug_08[0]]))
f8d.addStep(steps.Test(command=["etc/buildbot.sh", "-b", "mpi", "-t", "Debug", "-s", "test", "-d", Debug_08[0]], timeout=600))

f9d = util.BuildFactory()
f9d.addStep(steps.Git(repourl=apexrepo, mode='full', method='clean', submodules=True))
f9d.addStep(steps.Configure(command=["etc/buildbot.sh", "-b", "otf", "-t", "Debug", "-s", "config", "-d", Debug_09[0]]))
f9d.addStep(steps.Compile(command=["etc/buildbot.sh", "-b", "otf", "-t", "Debug", "-s", "pcompile", "-d", Debug_09[0]]))
f9d.addStep(steps.Test(command=["etc/buildbot.sh", "-b", "otf", "-t", "Debug", "-s", "test", "-d", Debug_09[0]], timeout=1200))

f10d = util.BuildFactory()
f10d.addStep(steps.Git(repourl=apexrepo, mode='full', method='clean', submodules=True))
f10d.addStep(steps.Configure(command=["etc/buildbot.sh", "-b", "install", "-t", "Debug", "-s", "config", "-d", Debug_10[0]]))
f10d.addStep(steps.Compile(command=["etc/buildbot.sh", "-b", "install", "-t", "Debug", "-s", "pcompile", "-d", Debug_10[0]]))
f10d.addStep(steps.Compile(command=["etc/buildbot.sh", "-b", "install", "-t", "Debug", "-s", "install", "-d", Debug_10[0]], timeout=600))

c['builders'] = []
c['builders'].append(util.BuilderConfig(name=Release_01[0], slavenames=["apex-slave"], factory=f1))
c['builders'].append(util.BuilderConfig(name=Release_02[0], slavenames=["apex-slave"], factory=f2))
c['builders'].append(util.BuilderConfig(name=Release_03[0], slavenames=["apex-slave"], factory=f3))
c['builders'].append(util.BuilderConfig(name=Release_04[0], slavenames=["apex-slave"], factory=f4))
c['builders'].append(util.BuilderConfig(name=Release_05[0], slavenames=["apex-slave"], factory=f5))
c['builders'].append(util.BuilderConfig(name=Release_06[0], slavenames=["apex-slave"], factory=f6))
c['builders'].append(util.BuilderConfig(name=Release_07[0], slavenames=["apex-slave"], factory=f7))
c['builders'].append(util.BuilderConfig(name=Release_08[0], slavenames=["apex-slave"], factory=f8))
c['builders'].append(util.BuilderConfig(name=Release_09[0], slavenames=["apex-slave"], factory=f9))
c['builders'].append(util.BuilderConfig(name=Release_10[0], slavenames=["apex-slave"], factory=f10))
c['builders'].append(util.BuilderConfig(name=Debug_01[0], slavenames=["apex-slave"], factory=f1d))
c['builders'].append(util.BuilderConfig(name=Debug_02[0], slavenames=["apex-slave"], factory=f2d))
c['builders'].append(util.BuilderConfig(name=Debug_03[0], slavenames=["apex-slave"], factory=f3d))
c['builders'].append(util.BuilderConfig(name=Debug_04[0], slavenames=["apex-slave"], factory=f4d))
c['builders'].append(util.BuilderConfig(name=Debug_05[0], slavenames=["apex-slave"], factory=f5d))
c['builders'].append(util.BuilderConfig(name=Debug_06[0], slavenames=["apex-slave"], factory=f6d))
c['builders'].append(util.BuilderConfig(name=Debug_07[0], slavenames=["apex-slave"], factory=f7d))
c['builders'].append(util.BuilderConfig(name=Debug_08[0], slavenames=["apex-slave"], factory=f8d))
c['builders'].append(util.BuilderConfig(name=Debug_09[0], slavenames=["apex-slave"], factory=f9d))
c['builders'].append(util.BuilderConfig(name=Debug_10[0], slavenames=["apex-slave"], factory=f10d))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("khuck","apexbuildbot"),("nchaimov","apexbuildbot")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "XPRESS APEX"
c['titleURL'] = "http://github.com/khuck/xpress-apex"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://ktau.nic.uoregon.edu:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
